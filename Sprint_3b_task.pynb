{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Sprint_3b_task\n",
        "\n",
        "Bu notebook, verilən 10 tapşırığı həll edir. Hər tapşırıq ayrı bir funksiya kimi təşkil olunub və nəticələri test etmək üçün çağırışlar əlavə edilib."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Tapşırıq 1: salam adlı funksiya yaradın ki, heç bir arqument almadan \"Salam, Dünya!\" çap etsin.\n",
        "def salam():\n",
        "    print(\"Salam, Dünya!\")\n",
        "\n",
        "# Test\n",
        "salam()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Tapşırıq 2: kub_hesabla adlı funksiya yaradın ki, bir rəqəm (n) qəbul etsin və onun kubunu qaytarsın.\n",
        "def kub_hesabla(n):\n",
        "    return n ** 3\n",
        "\n",
        "# Test\n",
        "print(kub_hesabla(2))  # 8\n",
        "print(kub_hesabla(5))  # 125"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Tapşırıq 3: birlesdir adlı funksiya yaradın ki, iki söz qəbul etsin və onları boşluqla birləşdirib qaytarsın.\n",
        "def birlesdir(soz1, soz2):\n",
        "    return soz1 + \" \" + soz2\n",
        "\n",
        "# Test\n",
        "print(birlesdir(\"Salam\", \"Dünya\"))  # Salam Dünya\n",
        "print(birlesdir(\"Python\", \"Proqramlaşdırma\"))  # Python Proqramlaşdırma"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Tapşırıq 4: cap_et adlı funksiya yaradın ki, bir listi arqument olaraq alsın və listin hər elementini for ilə çap etsin.\n",
        "def cap_et(lst):\n",
        "    for item in lst:\n",
        "        print(item)\n",
        "\n",
        "# Test\n",
        "cap_et([1, 2, 3, 4])  # 1 2 3 4\n",
        "cap_et([\"alma\", \"armud\", \"banan\"])  # alma armud banan"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Tapşırıq 5: toplam adlı funksiya yaradın ki, istənilən sayda rəqəmi (*args) qəbul edib onların cəmini qaytarsın.\n",
        "def toplam(*args):\n",
        "    return sum(args)\n",
        "\n",
        "# Test\n",
        "print(toplam(1, 2, 3))  # 6\n",
        "print(toplam(10, 20, 30, 40))  # 100\n",
        "print(toplam())  # 0"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Tapşırıq 6: ortalama adlı funksiya yaradın ki, istənilən sayda rəqəmi (*args) qəbul edib onların ortalamasını qaytarsın.\n",
        "# Əgər heç bir rəqəm yoxdursa, \"Rəqəm yoxdur\" qaytarsın.\n",
        "def ortalama(*args):\n",
        "    if not args:\n",
        "        return \"Rəqəm yoxdur\"\n",
        "    return sum(args) / len(args)\n",
        "\n",
        "# Test\n",
        "print(ortalama(1, 2, 3, 4))  # 2.5\n",
        "print(ortalama(10, 20))  # 15.0\n",
        "print(ortalama())  # Rəqəm yoxdur"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Tapşırıq 7: adlar_rəqəmlər adlı funksiya yaradın ki, istənilən sayda ad və rəqəm cütünü (**kwargs) qəbul edib hər cütü çap etsin.\n",
        "def adlar_rəqəmlər(**kwargs):\n",
        "    for ad, rəqəm in kwargs.items():\n",
        "        print(f\"ad: {ad}, rəqəm: {rəqəm}\")\n",
        "\n",
        "# Test\n",
        "adlar_rəqəmlər(bir=1, iki=2)  # ad: bir, rəqəm: 1  ad: iki, rəqəm: 2\n",
        "adlar_rəqəmlər(ali=10, veli=20, ceyhun=30)  # ad: ali, rəqəm: 10  ad: veli, rəqəm: 20  ad: ceyhun, rəqəm: 30"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Tapşırıq 8: tip_yoxla adlı funksiya yaradın ki, bir dəyər qəbul edib onun tipini yoxlasın: \"mətn\", \"rəqəm\", \"başqa\" çap etsin.\n",
        "def tip_yoxla(deyer):\n",
        "    if isinstance(deyer, str):\n",
        "        print(\"mətn\")\n",
        "    elif isinstance(deyer, (int, float)):\n",
        "        print(\"rəqəm\")\n",
        "    else:\n",
        "        print(\"başqa\")\n",
        "\n",
        "# Test\n",
        "tip_yoxla(\"salam\")  # mətn\n",
        "tip_yoxla(42)  # rəqəm\n",
        "tip_yoxla([1, 2, 3])  # başqa"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Tapşırıq 9: yas_kateqoriya adlı funksiya yaradın ki, input() ilə yaş soruşsun, 18-dən aşağıysa \"Gənc\", yuxarıdrsa \"Yetkin\" çap etsin.\n",
        "def yas_kateqoriya():\n",
        "    try:\n",
        "        yas = int(input(\"Yaşınızı daxil edin: \"))\n",
        "        if yas < 18:\n",
        "            print(\"Gənc\")\n",
        "        else:\n",
        "            print(\"Yetkin\")\n",
        "    except ValueError:\n",
        "        print(\"Xəta: Zəhmət olmasa rəqəm daxil edin.\")\n",
        "\n",
        "# Test\n",
        "# yas_kateqoriya()  # İstifadəçi girişi tələb edir, buna görə şərhə alındı."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Tapşırıq 10: soz_uzunluq adlı funksiya yaradın ki, input() ilə söz alsın və onun uzunluğunu çap etsin.\n",
        "def soz_uzunluq():\n",
        "    soz = input(\"Söz daxil edin: \")\n",
        "    print(len(soz))\n",
        "\n",
        "# Test\n",
        "# soz_uzunluq()  # İstifadəçi girişi tələb edir, buna görə şərhə alındı."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.10"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}